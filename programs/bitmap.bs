#include <lcd/lcd_init.bs>
#include <lcd/set_char.bs>
#include <lcd/cursor.bs>
#include <print/putc.bs>
#include <mem/set.bs>

#define CHARACTERS 8
#define CHARACTER_WORDS 4
#define CHARACTER_BYTES (CHARACTER_WORDS * 2)

#define CHAR_LOOKUP arr (0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 32, 32, 32, 32, 32, 48, 48, 48, 48, 48)

#define BIT_LOOKUP arr (0b10000, 0b01000, 0b00100, 0b00010, 0b00001, 0b10000, 0b01000, 0b00100, 0b00010, 0b00001, 0b10000, 0b01000, 0b00100, 0b00010, 0b00001, 0b10000, 0b01000, 0b00100, 0b00010, 0b00001)

let bitmap;

main()
{
    lcd_init(0);

    render();
    clear_screen();
    set_pixel(0, 0, 1);
    set_pixel(3, 5, 1);
    set_pixel(4, 15, 1);
    set_pixel(2, 12, 1);
    set_pixel(6, 10, 1);
    set_pixel(10, 10, 1);
    set_pixel(13, 13, 1);
    set_pixel(5, 11, 1);
    set_pixel(19, 15, 1);

    redraw();
}

/*
0 1 2 3
4 5 6 7
y_char  = y >> 3
y_bit   = y & 0b111

x_bit   = x % 5
x_char  = x / 5

char = (y_char << 2) + x_char

char = ((y >> 3) << 2) + (x / 5)

byte = ((char << 3) + y_bit)

byte = ((((y >> 3) << 2) + (x / 5)) << 3) + (y & 0b111)

1 << (5 - x_bit)

0 2 4 6
1 3 5 7

byte = ((x / 5) << 3) + y
*/

set_pixel(x, y, value)
{
    let byte = CHAR_LOOKUP[x] + y;
    let bit = BIT_LOOKUP[x];

    if (value)
    {
        *(bitmap + byte) |= bit;
    }
    else
    {
        *(bitmap + byte) &= (~bit);
    }
}

render()
{
    bitmap = arr [CHARACTERS * CHARACTER_WORDS];
    for (let i = 0; i < CHARACTERS; i += 2)
    {
        putc(i);
    }
    cursor(1, 0);
    for (let i = 1; i < CHARACTERS; i += 2)
    {
        putc(i);
    }
}

redraw()
{
    let addr = bitmap;
    for (let i = 0; i < CHARACTERS; i += 1)
    {
        set_char(i, addr);
        addr += CHARACTER_BYTES;
    }
}

clear_screen()
{
    set(bitmap, 0, CHARACTERS * CHARACTER_WORDS);
}

