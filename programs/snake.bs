#include <lcd/lcd_init.bs>
#include <lcd/cursor.bs>
#include <print/putc.bs>
#include <print/puts.bs>
#include <print/putd.bs>
#include <mem/set.bs>
#include <bitmap.bs>
#include <out.bs>
#include <rand.bs>
#include <mod.bs>

#define BOARD_WIDTH 20
#define BOARD_HEIGHT 16

#define EMPTY 0
#define TAIL_SEGMENT 1

let board;
let segments_x, segments_y;
let x_apple, y_apple;

main()
{
    lcd_init(0);
    render();
    clear_screen();

    cursor(0, 4);
    putc(0xff);
    puts(" Snake!");
    cursor(1, 4);
    putc(0xff);
    puts(" score: ");

    board = arr [BOARD_WIDTH * BOARD_HEIGHT];
    set(board, EMPTY, BOARD_WIDTH * BOARD_HEIGHT);
    segments_x = arr [0x100];
    segments_y = arr [0x100];

    let length = 1;
    set_score(length);
    let offset = 0;

    let x_head = 10;
    let y_head = 8;


    let x_mov = 1;
    let y_mov = 0;

    place_apple();

    /// Game loop

    while (1)
    {
        /// Input

        poll();
        if (x_mov)
        {
            if (input & 0b10000000)
            {
                x_mov = 0;
                y_mov = -1;
            }
            else if (input & 0b00100000)
            {
                x_mov = 0;
                y_mov = 1;
            }
        }
        else
        {
            if (input & 0b01000000)
            {
                x_mov = 1;
                y_mov = 0;
            }
            else if (input & 0b00010000)
            {
                x_mov = -1;
                y_mov = 0;
            }
        }
        input = 0;

        /// Game logic

        let x_new = x_head + x_mov;
        if (x_new > 19)
        {
            if (x_mov == -1)
                x_new = 19;
            else
                x_new = 0;
        }
        let y_new = (y_head + y_mov) & 0b1111;
        let board_index = (x_new << 4) + y_new;

        segments_x[offset] = x_head;
        segments_y[offset] = y_head;

        if (board[board_index] == TAIL_SEGMENT)
        {
            goto break_game_loop;
        }

        board[board_index] = TAIL_SEGMENT;
        let seg_index = (offset + length) & 0xff;

        let x_tail = segments_x[seg_index];
        let y_tail = segments_y[seg_index];
        set_pixel(x_tail, y_tail, 0);
        board[(x_tail << 4) + y_tail] = EMPTY;

        if (x_new == x_apple && y_new == y_apple)
        {
            set_score(length += 1);
            place_apple();
        }

        offset = (offset - 1) & 0xff;

        x_head = x_new;
        y_head = y_new;
        set_pixel(x_head, y_head, 1);

        /// Rendering

        // Poll for input occasionally so that inputs are not missed.
        redraw();
        // Redraw twice to add delay.
        // TODO: Add delay in a better way.
        redraw();
    }
break_game_loop:

    /// Game over

    cursor(0, 6);
    puts("Game Over!");

    // Cause the snake to disapear starting from the head to indicate game over.
    // The snake then reapears so the player can see how the game ended.
    for (let val = 0; val <= 1; val += 1)
    {
        for (let i = 0; i <= length; i += 1)
        {
            let seg_index = (offset + i) & 0xff;
            set_pixel(segments_x[seg_index], segments_y[seg_index], val);
            redraw();
        }
    }
}

place_apple()
{
    let index;
    do
    {
        x_apple = rand() % 20;
        y_apple = rand() & 0b1111;
        index = (x_apple << 4) + y_apple;
    }
    while (board[index] != EMPTY);
    set_pixel(x_apple, y_apple, 1);
}

set_score(score)
{
    score -= 1;
    out(score);
    cursor(1, 13);
    putd(score);
}

